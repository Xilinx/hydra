/*
 * Copyright 2019-2021 Xilinx, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/


To generate noc sources:
python genNOC.py 8 8 out -xilinx -split=c -data_width=64 -addr_width=2

Python script uses these arguments:

-split: defines the column-wise or row-wise split with default value of column-wise

-data_width: defines the DATA_WIDTH with default value of 32

-addr_width: defines the ADDR_WIDTH with default value of 2

-xilinx: enables the Xilinx DB annotations with default value of false (no annotations)

 

For example for generating 8x8 NOC and saving it in out-noc-8x8 folder with Xilinx annotations and splitting column-wise and DATA_WIDTH=16 and ADDR_WIDTH=3 the script would look like:

 genNOC.py 8 8 out-noc-8x8 -xilinx -split=c -data_width=16 -addr_width=3


To performance timing closure experiments:
make
